{"version":3,"sources":["vladimir-kudinov-orng-mDXPnk-unsplash.jpg","services/observations.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUrl","process","API_URL","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","Observation","observation","moment","datetime","format","name","scientificName","rarity","App","useState","observations","setObservations","newName","setNewName","newRarity","setNewRarity","newScientificName","setNewScientificName","useEffect","console","log","observationService","initialObservations","length","className","src","logo","alt","map","key","onSubmit","event","preventDefault","observationObject","returnedObject","concat","value","onChange","target","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.26ba249f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vladimir-kudinov-orng-mDXPnk-unsplash.4fe0ebb0.jpg\";","import axios from 'axios'\nconst baseUrl = process.env.API_URL ||Â 'http://localhost:3004/api'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl + '/observations')\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl + '/observations', newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/observations/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react';\nimport logo from './vladimir-kudinov-orng-mDXPnk-unsplash.jpg';\nimport './App.css';\nimport observationService from './services/observations';\nimport moment from 'moment'\n\nconst Observation = ({ observation }) => {\n  return (\n    <tr>\n      <td>{moment(observation.datetime).format('HH:MM:SS DD.MM.YYYY')}</td>\n      <td>{observation.name}</td>\n      <td>{observation.scientificName}</td>\n      <td>{observation.rarity}</td>\n    </tr>\n  )\n}\n\nfunction App() {\n\n  const [observations, setObservations] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newRarity, setNewRarity] = useState('common')\n  const [newScientificName, setNewScientificName] = useState('')\n\n\n  // fetch all observations from API\n  useEffect(() => {\n    console.log('effect')\n    observationService\n      .getAll()\n      .then(initialObservations => {\n        setObservations(initialObservations)\n      })\n\n  }, [])\n  console.log('render', observations.length, 'observations')\n\n  const addObservation = event => {\n    event.preventDefault()\n    const observationObject = {\n      name: newName,\n      scientificName: newScientificName,\n      rarity: newRarity\n    }\n\n    observationService\n      .create(observationObject)\n      .then(returnedObject => {\n        console.log('returned object...', returnedObject)\n        setObservations(observations.concat(returnedObject))\n        setNewName('')\n        setNewScientificName('')\n        setNewRarity('common')\n      })\n  }\n\n  const observationRows = () => observations.map(observation =>\n    <table>\n      <Observation\n        key={observation.id}\n        observation={observation}\n      />\n    </table>\n  )\n\n  const handeleNewNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handeleNewScientificNameChange = (event) => {\n    setNewScientificName(event.target.value)\n  }\n\n  const handeleNewRarityChange = (event) => {\n    console.log('event target value', event.target.value)\n    setNewRarity(event.target.value)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Birdie</h1>\n      </header>\n      <p></p>\n\n      <div>\n        <div>{observationRows()}</div>\n        <form onSubmit={addObservation}>\n          <label>Name\n          <input\n              value={newName}\n              onChange={handeleNewNameChange}\n            />\n          </label>\n          <br />\n          <label>Scientific name\n          <input\n              value={newScientificName}\n              onChange={handeleNewScientificNameChange}\n            />\n          </label>\n          <br />\n          <label>Rarity\n          </label>\n\n          <select value={newRarity} onChange={handeleNewRarityChange}>\n            <option value=\"common\">Common</option>\n            <option value=\"rare\">Rare</option>\n            <option value=\"extremely rare\">Extremely rare</option>\n          </select>\n\n\n          <button type=\"submit\">save</button>\n        </form>\n      </div>\n\n      {/*       <ButtonNew\n        handleNew={handleNew}\n        setShowBird={setShowBird} /> */}\n\n      {/*       {newObservation\n        ? <NewObservation />\n        :\n        !showBird\n          ? <Birds birds={birds} setShowBird={setShowBird} />\n          : <Bird bird={showBird} />\n      } */\n      }    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}