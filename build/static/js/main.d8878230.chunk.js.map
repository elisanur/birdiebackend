{"version":3,"sources":["vladimir-kudinov-orng-mDXPnk-unsplash.jpg","services/observations.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUrl","process","API_URL","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","Observation","observation","name","App","useState","observations","setObservations","setNewObservation","newName","setNewName","newRarity","setNewRarity","newScientificName","setNewScientificName","useEffect","console","log","observationService","initialObservations","length","className","src","logo","alt","map","key","onSubmit","event","preventDefault","observationObject","scientificName","rarity","returnedObject","concat","value","onChange","target","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d8878230.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vladimir-kudinov-orng-mDXPnk-unsplash.4fe0ebb0.jpg\";","import axios from 'axios'\nconst baseUrl = process.env.API_URL ||Â 'http://localhost:3004/api'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl + '/observations')\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl + '/observations', newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/observations/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react';\nimport logo from './vladimir-kudinov-orng-mDXPnk-unsplash.jpg';\nimport './App.css';\nimport observationService from './services/observations';\n\n/* import Birds from './components/Birds';\nimport Bird from './components/Bird'\nimport Button from './components/Button'\nimport styled, { css } from 'styled-components'\nimport ButtonDetails from './components/ButtonDetails'\n */\n\n/* const ButtonNew = ({ handleNew }) => {\n  console.log('...ButtonNew')\n  return (\n    <div>\n      <Button\n        onClick={handleNew}>\n        new observation\n      </Button>\n    </div>\n  )\n} */\n\n/* const NewObservation = () => {\n  console.log('....NewObservation')\n  return (\n    <div>\n      <form>\n        <table>\n          <tr>\n            <label>\n              Name:\n              <input type=\"text\" name=\"name\" />\n            </label>\n          </tr>\n          <tr>\n            <textarea name=\"note\" rows=\"10\" cols=\"30\">\n              Observation notes\n            </textarea>\n          </tr>\n          <tr>\n            <select>\n              <option selected value=\"common\">Common</option>\n              <option value=\"rare\">Rare</option>\n              <option value=\"extremely rare\">Extremely rare</option>\n            </select>\n          </tr>\n          <tr>\n            <input type=\"submit\" value=\"Submit\" />\n          </tr>\n        </table>\n      </form>\n    </div>\n  )\n} */\n\nconst Observation = ({ observation }) => {\n  return (\n    <li>{observation.name}</li>\n  )\n}\n\nfunction App() {\n\n  /* const [showBird, setShowBird] = useState(null)\n */\n  const [observations, setObservations] = useState([])\n  const [newObservation, setNewObservation] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newRarity, setNewRarity] = useState('')\n  const [newScientificName, setNewScientificName] = useState('')\n\n  // fetch all observations from API\n  useEffect(() => {\n    console.log('effect')\n    observationService\n      .getAll()\n      .then(initialObservations => {\n        setObservations(initialObservations)\n      })\n\n  }, [])\n  console.log('render', observations.length, 'observations')\n\n  const addObservation = event => {\n    event.preventDefault()\n    const observationObject = {\n      name: newName,\n      scientificName: newScientificName,\n      rarity: newRarity\n    }\n\n    observationService\n      .create(observationObject)\n      .then(returnedObject => {\n        console.log('returned object...', returnedObject)\n        setObservations(observations.concat(returnedObject))\n        setNewObservation('')\n        setNewName('')\n        setNewScientificName('')\n        setNewRarity('')\n      })\n  }\n\n  const observationRows = () => observations.map(observation =>\n    <Observation\n      key={observation.id}\n      observation={observation}\n    />\n  )\n\n  const handeleNewObservationChange = (event) => {\n    setNewObservation(event.target.value)\n  }\n\n  const handeleNewNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handeleNewScientificNameChange = (event) => {\n    setNewScientificName(event.target.value)\n  }\n\n  const handeleNewRarityChange = (event) => {\n    console.log('event target value', event.target.value)\n    setNewRarity(event.target.value)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Birdie</h1>\n      </header>\n      <p></p>\n\n      <div>\n        <ul>{observationRows()}</ul>\n        <form onSubmit={addObservation}>\n          <label>Name\n          <input\n              value={newName}\n              onChange={handeleNewNameChange}\n            />\n          </label>\n          <br />\n          <label>Scientific name\n          <input\n              value={newScientificName}\n              onChange={handeleNewScientificNameChange}\n            />\n          </label>\n          <br />\n          <label>Rarity\n            {/* <select value={newRarity} onChange={handeleNewRarityChange}>\n              <option value=\"common\">Common</option>\n              <option value=\"rare\">Rare</option>\n              <option value=\"extremely rare\">Extremely rare</option>\n            </select> */}\n            <input\n              value={newRarity}\n              onChange={handeleNewRarityChange}\n            />\n          </label>\n\n\n          <button type=\"submit\">save</button>\n        </form>\n      </div>\n\n      {/*       <ButtonNew\n        handleNew={handleNew}\n        setShowBird={setShowBird} /> */}\n\n      {/*       {newObservation\n        ? <NewObservation />\n        :\n        !showBird\n          ? <Birds birds={birds} setShowBird={setShowBird} />\n          : <Bird bird={showBird} />\n      } */\n      }    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}