{"version":3,"sources":["services/observations.js","services/login.js","components/Notification.js","components/Footer.js","components/loginForm.js","components/ObservationForm.js","components/Togglable.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","process","REACT_APP_API_URL","token","getAll","order","request","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credentials","console","log","logout","register","name","username","password","Notification","message","className","Footer","style","color","fontStyle","fontSize","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","onSubmit","value","onChange","type","ObservationForm","handleNewRarityChange","handleNewNameChange","handleNewScientificNameChange","newName","newRarity","newScientificName","handleNewNoteChange","newNote","Togglable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","onClick","buttonLabel","children","Observation","observation","key","scientificName","moment","datetime","format","rarity","split","join","note","App","observations","setObservations","setNewName","setNewRarity","setNewScientificName","setNewNote","setUsername","setPassword","user","setUser","errorMessage","setErrorMessage","loginVisible","setLoginVisible","useEffect","observationService","initialObservations","loggedUserJSON","window","localStorage","getItem","JSON","parse","handleLogin","event","preventDefault","loginService","setItem","stringify","setTimeout","observationFormRef","createRef","observationFormProps","current","observationObject","returnedObject","concat","catch","target","loginForm","map","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f488d8c1.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = process.env.REACT_APP_API_URL || '/api'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = (order='-1') => {\n  const request = axios.get(baseUrl + '/observations?order=' + order)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.post(baseUrl + '/observations', newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/observations/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken }","import axios from 'axios'\nconst baseUrl = process.env.REACT_APP_API_URL || '/api'\n\n\nconst login = async credentials => {\n  console.log('logging in...', credentials)\n  const response = await axios.post(baseUrl + '/login', credentials)\n  return response.data\n}\n\nconst logout = async () => {\n  console.log('logging out...')\n  const response = await axios.post(baseUrl + '/logout')\n  return response.data\n}\n\nconst register = async (name, username, password)  => {\n  console.log('creating user...')\n  const response = await axios.post(baseUrl + '/register')\n  return response.data\n}\n\nexport default { login, logout, register }","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","  \nimport React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Birdie, Elisa Nurmi 2019</em>\n    </div>\n  )\n}\n\nexport default Footer","import React from 'react'\n\nconst LoginForm = ({\n   handleSubmit,\n   handleUsernameChange,\n   handlePasswordChange,\n   username,\n   password\n  }) => {\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n      </div>\n        <button type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm","import React from 'react'\n\nconst ObservationForm = ({ \n  onSubmit, \n  handleNewRarityChange, \n  handleNewNameChange, \n  handleNewScientificNameChange, \n  newName, \n  newRarity, \n  newScientificName,\n  handleNewNoteChange,\n  newNote \n}) => {\n  \n    return (\n    <div>\n      <h2>Create a new observation</h2>\n      <form onSubmit={onSubmit}>\n      <label>Name\n      <input\n          value={newName}\n          onChange={handleNewNameChange}\n        />\n      </label>\n      <br />\n      <label>Scientific name\n      <input\n          value={newScientificName}\n          onChange={handleNewScientificNameChange}\n        />\n      </label>\n      <br />\n      <label>Rarity\n      </label>\n      <select value={newRarity} onChange={handleNewRarityChange}>\n        <option value=\"common\">Common</option>\n        <option value=\"rare\">Rare</option>\n        <option value=\"extremely rare\">Extremely rare</option>\n      </select>\n     <br />\n      <label>Notes\n      <textarea\n          value={newNote}\n          onChange={handleNewNoteChange}\n        />\n    </label>\n      <button type=\"submit\">save</button>\n    </form>\n\n    </div>\n  )\n}\n\nexport default ObservationForm","import React, { useState, useImperativeHandle } from 'react'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nexport default Togglable","import React, { useState, useEffect } from 'react';\n// import logo from './vladimir-kudinov-orng-mDXPnk-unsplash.jpg';\nimport './App.css';\nimport observationService from './services/observations';\nimport moment from 'moment'\nimport loginService from './services/login'\n// import { nextTick } from 'q';\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport LoginForm from './components/loginForm'\nimport ObservationForm from './components/ObservationForm';\nimport Togglable from './components/Togglable'\n\nconst Observation = ({ observation }) => {\n  return (\n    <div key={observation.id} className=\"observation-row\">\n      <span className=\"observation-name\">{observation.name}</span> <span className=\"observation-scientificname\">({observation.scientificName})</span> <span className=\"observation-time\">{moment(observation.datetime).format('HH:MM:SS DD.MM.YYYY')}</span>\n      <span className={`observation-rarity observation-rarity--${observation.rarity.split(' ').join('-')}`}>{observation.rarity}</span>\n      <div className=\"observation-note\">{observation.note}</div>\n    </div>\n  )\n}\n\nfunction App() {\n\n  const [observations, setObservations] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newRarity, setNewRarity] = useState('common')\n  const [newScientificName, setNewScientificName] = useState('')\n  const [newNote, setNewNote] = useState('')\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [loginVisible, setLoginVisible] = useState(false)\n\n\n  // fetch all observations from API\n  useEffect(() => {\n    observationService\n      .getAll()\n      .then(initialObservations => {\n        setObservations(initialObservations)\n      })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBirdieUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      observationService.setToken(user.token)\n    }\n  }, [])\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password\n      })\n\n      window.localStorage.setItem(\n        'loggedBirdieUser', JSON.stringify(user))\n\n      observationService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const addObservation = event => {\n    event.preventDefault()\n    observationFormRef.current.toggleVisibility()\n    const observationObject = {\n      name: newName,\n      scientificName: newScientificName,\n      note: newNote,\n      rarity: newRarity\n    }\n\n    observationService\n      .create(observationObject)\n      .then(returnedObject => {\n        setObservations([returnedObject].concat(observations))\n        setNewName('')\n        setNewScientificName('')\n        setNewRarity('common')\n        setNewNote('')\n      })\n      .catch(returnedObject => {\n        setErrorMessage('Error')\n      })\n  }\n\n  const observationRows = () => observations.map(observation =>\n        <Observation\n          key={observation.id}\n          observation={observation}\n        />\n  )\n\n  const handleNewNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNewScientificNameChange = (event) => {\n    setNewScientificName(event.target.value)\n  }\n\n  const handleNewNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const handleNewRarityChange = (event) => {\n    setNewRarity(event.target.value)\n  }\n\n\n\n  const loginForm = () => {\n    const hideWhenVisible = { display: loginVisible ? 'none' : '' }\n    const showWhenVisible = { display: loginVisible ? '' : 'none' }\n\n    return (\n      <div>\n        <div style={hideWhenVisible}>\n          <button onClick={() => setLoginVisible(true)}>log in</button>\n        </div>\n        <div style={showWhenVisible}>\n          <LoginForm\n            username={username}\n            password={password}\n            handleUsernameChange={({ target }) => setUsername(target.value)}\n            handlePasswordChange={({ target }) => setPassword(target.value)}\n            handleSubmit={handleLogin}\n          />\n          <button onClick={() => setLoginVisible(false)}>cancel</button>\n        </div>\n      </div>\n    )\n  }\n\n  const observationFormRef = React.createRef()\n  let observationFormProps = {\n    onSubmit: addObservation,\n    newName,\n    handleNewNameChange,\n    newRarity,\n    handleNewRarityChange,\n    newScientificName,\n    handleNewScientificNameChange,\n    newNote,\n    handleNewNoteChange\n  }\n\n  return (\n    <div>\n      <h1>Birdie</h1>\n\n      <Notification message={errorMessage} />\n\n      {user === null ?\n        loginForm() :\n        <div>\n          <p>{user.name} logged in</p>\n          < Togglable buttonLabel=\"new observation\" ref={observationFormRef} >\n            <ObservationForm {...observationFormProps} />\n          </Togglable >\n\n        </div>\n      }\n\n      <div>\n        <h2>Observations</h2>\n        <div>{observationRows()}</div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n/*\nif(process.env.NODE_ENV)\n  REACT_APP_API_URL = 'http://localhost:3004/api'\n*/\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}